1
00:00:00,000 --> 00:00:02,880
接下来我们热烈欢迎创新中心技术专家

2
00:00:02,880 --> 00:00:05,520
清华大学计算机器陈瑜教授

3
00:00:05,520 --> 00:00:08,460
进行联合实验室OS项目的介绍

4
00:00:08,460 --> 00:00:10,220
欢迎陈教授

5
00:00:10,220 --> 00:00:13,100
好 那我们就开始

6
00:00:13,100 --> 00:00:16,480
现在非常高兴能够和大家一起交流一下

7
00:00:16,480 --> 00:00:19,560
关于就是潮系桶这一块的一些

8
00:00:19,560 --> 00:00:21,260
在汽车领域的一些发展

9
00:00:21,260 --> 00:00:24,220
也看到很多感兴趣的这些同学

10
00:00:24,220 --> 00:00:27,140
或者是工程师来参与这个活动

11
00:00:27,140 --> 00:00:28,480
那么整个这个

12
00:00:28,480 --> 00:00:30,280
我会介绍两方面的一个情况

13
00:00:30,280 --> 00:00:31,920
第一个是这个背景和现状

14
00:00:31,920 --> 00:00:37,240
第二个是一个目前结合国际资联传信中心做的一些研发计划

15
00:00:37,240 --> 00:00:39,300
这是两个内容

16
00:00:39,300 --> 00:00:40,640
那么在这个背景上面

17
00:00:40,640 --> 00:00:43,280
首先我们可以看一下就是OS的发展

18
00:00:43,280 --> 00:00:46,180
其实有很多的同学都说

19
00:00:46,180 --> 00:00:50,480
或者很多的一些老师也都提到过说

20
00:00:50,480 --> 00:00:56,300
OS好像是一个应该说比较时间比较长的一个软件

21
00:00:56,300 --> 00:00:57,180
发展很长时间了

22
00:00:57,180 --> 00:00:59,860
应该是好像觉得没有什么特别大的一些变化

23
00:00:59,860 --> 00:01:02,500
但其实如果深入到OS内部的话

24
00:01:02,500 --> 00:01:07,820
你会发现它的变化是随着应用的需求的变化而变化

25
00:01:07,820 --> 00:01:09,220
随着硬件的变化而变化

26
00:01:09,740 --> 00:01:12,880
所以我们看到现在超级桶里面有很多的问题

27
00:01:12,880 --> 00:01:15,340
还需要去解决或者是突破

28
00:01:15,340 --> 00:01:19,280
这里面会涉及到跟硬件的一个交互的问题

29
00:01:19,280 --> 00:01:20,940
会涉及到新的应用需求

30
00:01:20,940 --> 00:01:22,600
特别是现在以车为例

31
00:01:22,600 --> 00:01:24,680
它那个自动驾驶这一块安全这一块

32
00:01:54,880 --> 00:02:02,840
我個人覺得這個安全是一個相對於其他的超級統而言

33
00:02:02,840 --> 00:02:04,360
比如說桌面服務器而言的話

34
00:02:04,360 --> 00:02:06,680
它這個重要性會更凸顯一些

35
00:02:07,800 --> 00:02:10,880
那所以我們看到如果是在安全來看的話

36
00:02:11,420 --> 00:02:13,080
其實VR這個超級統的安全

37
00:02:13,080 --> 00:02:16,780
我們有很多的方法來解決

38
00:02:16,780 --> 00:02:18,800
包括從軟件工程的方法

39
00:02:18,800 --> 00:02:21,240
從超級統本身的架構的設計

40
00:02:21,240 --> 00:02:24,680
编程语言以及硬件的一些机制

41
00:02:24,680 --> 00:02:26,540
怎么来推动这个操作的安全

42
00:02:26,540 --> 00:02:32,520
应该来说一直有很多不同角度来进行探索

43
00:02:32,520 --> 00:02:36,340
我们这里面可能更多的强调了语言的一种机制

44
00:02:36,340 --> 00:02:38,220
和软件架构的机制

45
00:02:38,220 --> 00:02:40,760
当然也会结合相应的软件工程的机制

46
00:02:40,760 --> 00:02:45,000
来对OS的安全性来进行改进

47
00:02:45,000 --> 00:02:48,840
那么这是对OS的总的一个背景介绍

48
00:02:48,840 --> 00:02:54,800
另一方面我们看到其实现在新联合车我们叫特别是AI

49
00:02:55,620 --> 00:03:00,860
应该AI在智能的这种智能网联车这一块应该说是一个新的一个

50
00:03:00,860 --> 00:03:01,880
发展方向

51
00:03:01,880 --> 00:03:03,960
那么大家都知道AI现在很火

52
00:03:03,960 --> 00:03:08,600
但是AI的应用在哪一方面能够比较快的用起来

53
00:03:08,600 --> 00:03:11,120
那至少在车这个领域我们是看得见摸得着的

54
00:03:12,020 --> 00:03:18,940
在这里面 维尔的车理由于它对AI的要求越来越多

55
00:03:18,940 --> 00:03:22,740
使得相应的软件在这里面的比重占的也越来越大

56
00:03:22,740 --> 00:03:28,740
而软件这一块 它车和前面的比如说桌面的Wintel

57
00:03:28,740 --> 00:03:32,020
或者移动终端的安卓和ARM还很不一样

58
00:03:32,020 --> 00:03:34,580
到目前为止 还没有形成生态

59
00:03:35,240 --> 00:03:39,220
没有类似这样的一个比如说你有一个很强的一个公司

60
00:03:39,220 --> 00:03:45,140
我就做了一个芯片,加了一个超级桶,就能够把车的核心部分就做出来了

61
00:03:45,140 --> 00:03:49,020
现在还不存在,这也意味着有很多新的机会和挑战

62
00:03:51,360 --> 00:04:03,180
那么另一方面我们看到虽然没有一个很强的一个处于统治地位的硬件或者软

63
00:04:03,180 --> 00:04:03,660
件厂商

64
00:04:03,660 --> 00:04:09,720
但是各个车企他们有非常大的一个发展

65
00:04:09,720 --> 00:04:11,140
比如特斯拉

66
00:04:11,140 --> 00:04:13,280
比如我们看到的英伟达

67
00:04:13,280 --> 00:04:15,820
国内的华为等等

68
00:04:15,820 --> 00:04:18,160
这些其实都做了非常大的一些

69
00:04:18,160 --> 00:04:21,380
他们各自在各自的领域在做这个工作

70
00:04:21,380 --> 00:04:24,380
而这个领域其实有个比较大的问题在哪了

71
00:04:24,380 --> 00:04:25,100
他们做这个东西

72
00:04:25,100 --> 00:04:26,380
比如以特斯拉为例

73
00:04:26,380 --> 00:04:29,680
它从底层的芯片到上层的整车

74
00:04:29,680 --> 00:04:32,200
包括中间的软件控制器等等

75
00:04:32,200 --> 00:04:33,040
全是它自己做

76
00:04:33,040 --> 00:04:37,880
它几乎不需要其他的这个单位的太多的参与

77
00:04:37,880 --> 00:04:40,260
它有点像苹果 有点像苹果

78
00:04:40,260 --> 00:04:42,360
那么华为其实在国内也是类似的

79
00:04:42,360 --> 00:04:44,740
当然华为还没有到整车这个程度

80
00:04:44,740 --> 00:04:49,580
但至少我们已经看到华为内部有很强的要做整车这么一个动力

81
00:04:49,580 --> 00:04:51,560
这也都是一种模式

82
00:04:51,560 --> 00:04:53,540
那这种模式就类似于苹果模式

83
00:04:53,540 --> 00:04:57,280
但其实还有一种模式就是我们说的安卓模式

84
00:04:57,280 --> 00:05:00,420
它可能需要或者Linux这种模式

85
00:05:00,420 --> 00:05:05,140
它需要更多的一些厂商发挥各自的优势形成合力

86
00:05:05,140 --> 00:05:10,940
这种方式也许在国内是有一些新的机会

87
00:05:12,520 --> 00:05:15,500
那么另一方面超级桶前面已经提到了

88
00:05:15,500 --> 00:05:18,580
面向车的这个超级桶它的安全问题特别凸显

89
00:05:18,580 --> 00:05:25,460
这几年的世界黑客大赛针对车的攻击是特别多的

90
00:05:26,240 --> 00:05:29,320
而且就是作为一个比赛项目来对待

91
00:05:29,320 --> 00:05:34,360
所以可以看出来,车这一块是安全性得到非常大的一个重视

92
00:05:34,360 --> 00:05:36,920
确实车和手机桌面不一样

93
00:05:36,920 --> 00:05:39,620
它和人的生命安全有直接的关系

94
00:05:41,960 --> 00:05:43,700
我们这里面想解决什么问题呢

95
00:05:44,220 --> 00:05:48,960
我个人觉得早期的车的软件系统

96
00:05:48,960 --> 00:05:51,980
其实是有点类似于以前的嵌入槽系统

97
00:05:51,980 --> 00:05:54,140
它相对来说比较固化

98
00:05:54,140 --> 00:05:58,060
而且它的发展的速度也远慢于现在的互联网

99
00:05:58,060 --> 00:06:01,080
这个领域的这个超级系统的发展

100
00:06:01,080 --> 00:06:04,920
那么它也是一种典型的一种红内核或者微内核架构

101
00:06:04,920 --> 00:06:10,080
但其实这个架构还并没有完全能够决定这个超级系统的一个持续发展的

102
00:06:10,080 --> 00:06:10,800
一个思路

103
00:06:10,800 --> 00:06:14,460
目前我们也看到有些新的比较多核外核的一种架构的出现

104
00:06:14,460 --> 00:06:16,540
我们这里面还有一方面看到的是什么呢

105
00:06:16,540 --> 00:06:17,500
就是安全性

106
00:06:17,500 --> 00:06:20,700
这个安全性你看所有目前的超级系统都是基于C语言的

107
00:06:20,700 --> 00:06:23,880
那能否还有新的一些语言来进行突破

108
00:06:23,880 --> 00:06:28,240
这就是我们看到的从学术界到产业界一直在做这个事情

109
00:06:28,240 --> 00:06:31,100
应该说2000年之后呢

110
00:06:31,720 --> 00:06:37,880
学术界用了各种各样的一些技术来推动这个超久的发展

111
00:06:41,220 --> 00:06:45,920
但是我们看到的是在企业这一块呢

112
00:06:45,920 --> 00:06:48,920
其实从去年开始我们已经看到了

113
00:06:49,900 --> 00:06:51,520
Linux和Windows

114
00:06:51,520 --> 00:06:58,140
这个非常重量级的超级系统也都引入了RUST的一个发展

115
00:06:58,140 --> 00:07:02,520
包括谷歌他们在自己下一代的OS里面也引入了RUST

116
00:07:02,520 --> 00:07:05,440
那么到今年我们可以看到今年9月份

117
00:07:06,720 --> 00:07:07,700
今年9月份的话

118
00:07:07,700 --> 00:07:14,400
那么我们看到是Windows提出了一个RUST for Windows这么一个子系统

119
00:07:14,400 --> 00:07:15,660
在这个子系统里面

120
00:07:15,660 --> 00:07:20,100
就可以用RUST的语言来写Windows的内核模块

121
00:07:20,100 --> 00:07:21,620
特别是驱动这一块

122
00:07:21,620 --> 00:07:24,240
他们已经把它做成一个开源项目

123
00:07:24,240 --> 00:07:28,720
来推动RUST在Windows内核里面的一个发展

124
00:07:28,720 --> 00:07:31,400
同时我们看到最近开的一个会

125
00:07:31,400 --> 00:07:34,120
就是GOSME这个会里面

126
00:07:34,120 --> 00:07:37,680
RUST 40x的核心开发成员也做了一个报告

127
00:07:37,680 --> 00:07:42,300
提出了RUST 40x的当前和下一代的一个发展

128
00:07:43,000 --> 00:07:49,320
这是我们说看到RUST在产业界得到一个认可和支持的一种

129
00:07:52,560 --> 00:07:57,600
那么这是我们前面稍微比较快的介绍一下这个背景的现状

130
00:07:57,600 --> 00:08:01,280
再接下来我们会介绍一下目前在做的一些尝试

131
00:08:02,700 --> 00:08:09,780
这是一个面向自动智能驾驶的一个基础软件通体架构的一个参考的

132
00:08:09,780 --> 00:08:10,080
一个图

133
00:08:10,080 --> 00:08:15,820
这个图里面可以看出来我们这里面有像这个

134
00:08:15,820 --> 00:08:19,200
这基础软件这一块其实分了就是功能软件和系统软件这一块

135
00:08:19,200 --> 00:08:22,360
我们传统意义上的操作内核在这个层面

136
00:08:22,360 --> 00:08:25,680
这个层面里面其实就目前的发展来说

137
00:08:25,680 --> 00:08:31,700
很难说只有一个OS就能够把所有的车上的软件都统一起来

138
00:08:31,700 --> 00:08:33,440
就像桌面的Windows一样

139
00:08:34,120 --> 00:08:36,440
其实现在来说看到Linux是比较多

140
00:08:36,440 --> 00:08:38,540
但其实还有很多新的一些OS

141
00:08:38,540 --> 00:08:40,160
比如QoS也在存在

142
00:08:40,160 --> 00:08:45,740
那么我们想的是能不能做出一个能够兼容Linux Syscall

143
00:08:45,740 --> 00:08:51,620
且具有一些新的一些比如说新的一些架构的一些OS存在

144
00:08:51,620 --> 00:08:57,340
新OS或者是说就基于Linux在Linux内部做进一步的安全

145
00:08:57,340 --> 00:08:59,820
可扩展这方面来做一些工作

146
00:08:59,820 --> 00:09:04,220
这就是我们说的这个超级统内核的一个考虑

147
00:09:04,220 --> 00:09:06,340
那么其他方面还有比如中间键

148
00:09:06,340 --> 00:09:08,560
包括上层的这个功能软件

149
00:09:08,560 --> 00:09:14,680
面向这个上层智能应用的这些提供相应服务接口等等

150
00:09:14,680 --> 00:09:17,760
那都是目前在快速发展

151
00:09:17,760 --> 00:09:20,720
但是并没有说有一家独大的情况

152
00:09:20,720 --> 00:09:23,960
所以我们觉得这里面有很多可以做的一些事情

153
00:09:25,020 --> 00:09:27,260
那么站在因为我们这边可能

154
00:09:27,260 --> 00:09:31,720
我个人本来是比较测试在操线内核这个领域的

155
00:09:31,720 --> 00:09:32,880
所以从内核角度来说

156
00:09:32,880 --> 00:09:35,760
我们其实大家都前面都应该接触过就是RUST

157
00:09:35,760 --> 00:09:44,340
那我们觉得RUST其实它能够去用于安全的一个

158
00:09:44,980 --> 00:09:49,420
而这种设计的思路能否用于我们的OS的一个架构设计里面

159
00:09:49,420 --> 00:09:54,300
或者OS的一个模块的一个关联的关系上面

160
00:09:54,300 --> 00:09:55,780
这一块也是值得去考虑的

161
00:09:55,780 --> 00:09:57,700
特别是在OS的资源管理上面

162
00:09:57,700 --> 00:10:04,620
能否借助于RUS的这个所有权机制进行另一个层面的一个设计实现

163
00:10:04,620 --> 00:10:06,940
这其实是我们一定要做的一个探索

164
00:10:06,940 --> 00:10:10,860
另一方面在架构层面我们也看到是现在的OS

165
00:10:10,860 --> 00:10:15,360
现在OS一般是像Linux、Windows单体内核

166
00:10:15,360 --> 00:10:17,460
那么是一个红内核架构

167
00:10:17,460 --> 00:10:20,540
那么像QNX是一种微内核架构

168
00:10:20,540 --> 00:10:25,500
那我们能不能实现一种跟架构无关的一种OS设计

169
00:10:25,500 --> 00:10:30,080
是以组件的方式来形成一种独立OS的一种组件库

170
00:10:30,080 --> 00:10:35,480
然后再结合一种偶和OS的组件库来形成不同类型的内核

171
00:10:35,480 --> 00:10:37,360
这是我们在做的一种探索

172
00:10:37,360 --> 00:10:42,580
我们也希望通过跟国际资源和其他一些产业界的一些合作

173
00:10:42,580 --> 00:10:47,780
能够把它变成一个实际上能落地的一些软件的一些成果

174
00:10:48,940 --> 00:10:52,600
那么在学校里面我们其实已经做了一些相应的一些探索

175
00:10:52,600 --> 00:10:54,100
就是基于Unicolon的架构

176
00:10:54,100 --> 00:10:59,800
用组件的方式来实现一个基于RAST语言的一个内核

177
00:10:59,800 --> 00:11:02,580
而这个内核可以看到它里面有大量的

178
00:11:02,580 --> 00:11:06,640
像这边大量的跟具体OS无关的一些模块

179
00:11:06,640 --> 00:11:09,620
而这个刚才说是跟具体OS相关的模块

180
00:11:09,620 --> 00:11:11,580
一个典型的例子像驱动

181
00:11:11,580 --> 00:11:14,820
驱动这一块就是一些可以做到跟OS无关的驱动

182
00:11:14,820 --> 00:11:19,240
我们可以实现针对World IO这个Spec的一系列的驱动

183
00:11:19,240 --> 00:11:21,060
都是和具体的OS无关

184
00:11:21,060 --> 00:11:24,360
从而可以达到一种灵活组合出

185
00:11:24,360 --> 00:11:29,960
针对有限的特定应用的一些高性能的安全的一些OS

186
00:11:29,960 --> 00:11:34,900
而这种场景在比如自动驾驶领域也许是一个合适的场景

187
00:11:34,900 --> 00:11:37,220
当然其实这种也不仅仅是说面向汽车

188
00:11:37,220 --> 00:11:40,020
也可以用在其他的一些比如说AILT领域

189
00:11:41,280 --> 00:11:44,220
那么另一方面我们看到就是除了安全上外

190
00:11:44,220 --> 00:11:48,180
还有一些新的一些在性能上面的一些考虑

191
00:11:48,180 --> 00:11:50,020
比如说现在的携程机制

192
00:11:50,020 --> 00:11:52,720
我们知道C语言C语言其实没有携程

193
00:11:52,720 --> 00:11:54,820
它是在语言里面有携程

194
00:11:54,820 --> 00:11:56,820
那么现在的新的高级语言

195
00:11:56,820 --> 00:11:58,160
比如说C-Sharp

196
00:11:58,160 --> 00:12:02,360
比如说CI加Rust Go都有相应的携程机制

197
00:12:02,360 --> 00:12:04,500
我们希望能够把携程机制用于

198
00:12:04,500 --> 00:12:09,920
超级程度的整体设计从而可以在鞋层线层进程之间能够形成

199
00:12:09,920 --> 00:12:15,820
更加统一的和高效的一种调度管理机制

200
00:12:15,820 --> 00:12:18,340
这也是我们一个在探索的一个内容

201
00:12:18,340 --> 00:12:22,700
那么前面讲的这些可能一些研究的内容

202
00:12:22,700 --> 00:12:24,220
那其实我们还需要落地

203
00:12:24,220 --> 00:12:27,980
所以从落地角来说前面已经提到了就是我们是两条路线

204
00:12:27,980 --> 00:12:31,360
一条路线是说要做一个全新的OS全用RUS来写

205
00:12:31,360 --> 00:12:38,920
当然这个的话肯定它的发展的可预见性相当于是有很多的一些不确定性

206
00:12:38,920 --> 00:12:40,580
那么另一条路就是基于Linux

207
00:12:40,580 --> 00:12:41,800
我们现在已经看到了

208
00:12:41,800 --> 00:12:46,440
前面说Rath方Linux已经存在在Linux内核的主干中

209
00:12:46,440 --> 00:12:47,620
从6.1开始

210
00:12:47,620 --> 00:12:50,600
所以我们现在在和一些单位合作

211
00:12:50,600 --> 00:12:54,900
基于合众的一个具体的车

212
00:12:55,560 --> 00:13:00,820
来重新把它的软件从早期的Linux 5.10变到Linux 6.1

213
00:13:00,820 --> 00:13:03,940
并在核心部分用RUS来重写

214
00:13:03,940 --> 00:13:05,580
比如它这个网络驱动模块

215
00:13:06,360 --> 00:13:07,940
其实我们已经用RUS来写了

216
00:13:07,940 --> 00:13:09,480
能够跑在这个车上面

217
00:13:10,460 --> 00:13:12,040
至少跑在这个预控制器上面

218
00:13:12,040 --> 00:13:13,460
能够让它正常的工作

219
00:13:13,460 --> 00:13:16,980
整个6.1内核也已经可以在车上面去跑了

220
00:13:16,980 --> 00:13:18,180
这充分说明了这种

221
00:13:19,440 --> 00:13:21,280
其实RUS的这种内核模块

222
00:13:21,280 --> 00:13:26,980
其实是可以用在实际的产业落地这个场景的

223
00:13:26,980 --> 00:13:30,480
前面只是一个我们在今年上半年的一个尝试

224
00:13:30,480 --> 00:13:32,440
那么还有一个更长远的计划

225
00:13:33,400 --> 00:13:36,060
其实我们学校是从去年开始

226
00:13:36,680 --> 00:13:39,860
就是和国际资联穿运中心合作

227
00:13:39,860 --> 00:13:41,880
在开展一些前期的一些探索

228
00:13:41,880 --> 00:13:42,900
到今年9月份

229
00:13:42,900 --> 00:13:45,160
其实我们就初步完成了一个

230
00:13:45,160 --> 00:13:46,680
就是刚才看到的合纵

231
00:13:46,680 --> 00:13:49,600
这个整车的一个Linux的一个跑艇

232
00:13:49,600 --> 00:13:51,300
以及相应的我们还做了一个

233
00:13:51,300 --> 00:13:53,780
就是Akos OS的一个移植工作

234
00:13:53,780 --> 00:13:55,080
这都是我们在做的事情

235
00:13:55,080 --> 00:13:57,120
那我们预计到2025年

236
00:13:57,120 --> 00:13:59,680
这个长期的一个三年的一个时间

